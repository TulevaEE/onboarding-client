// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SecondPillarStatusBox renders high fee message when in high fee fund and no partial conversion 1`] = `
<StatusBoxRow
  error={true}
  lines={
    Array [
      <React.Fragment>
        <Memo(MemoizedFormattedMessage)
          id="account.status.choice.highFee.label"
        />
        :
         
        <ActiveFund
          fund={
            Object {
              "activeFund": true,
              "contributions": 500,
              "currency": "EUR",
              "fundManager": Object {
                "name": "LHV",
              },
              "isin": "EE432432",
              "managementFeePercent": 0.015,
              "name": "LHV High Cost Fund II",
              "ongoingChargesFigure": 0.0156,
              "pillar": 2,
              "price": 23,
              "profit": 500,
              "subtractions": 0,
              "unavailablePrice": 0,
            }
          }
        />
      </React.Fragment>,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  showAction={true}
>
  <Link
    className="btn btn-primary"
    to="/2nd-pillar-flow"
  >
    <MemoizedFormattedMessage
      id="account.status.choice.choose.low.fees"
    />
  </Link>
</StatusBoxRow>
`;

exports[`SecondPillarStatusBox renders no 2nd pillar flow when no second pillar 1`] = `
<StatusBoxRow
  error={true}
  lines={
    Array [
      <Memo(MemoizedFormattedMessage)
        id="account.status.choice.pillar.second.missing.label"
      />,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  showAction={true}
/>
`;

exports[`SecondPillarStatusBox renders the PIK flow when fund PIK number present 1`] = `
<StatusBoxRow
  lines={
    Array [
      <Memo(MemoizedFormattedMessage)
        id="account.status.choice.pillar.second.pik"
        values={
          Object {
            "secondPillarPikNumber": "EE1234567",
          }
        }
      />,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  showAction={true}
/>
`;

exports[`SecondPillarStatusBox renders the choice flow when fund selection incomplete 1`] = `
<StatusBoxRow
  lines={
    Array [
      <React.Fragment>
        <Memo(MemoizedFormattedMessage)
          id="account.status.choice.lowFee.label"
        />
        :
         
        <ActiveFund
          fund={
            Object {
              "activeFund": true,
              "contributions": 500,
              "currency": "EUR",
              "fundManager": Object {
                "name": "Tuleva",
              },
              "isin": "EE000123",
              "managementFeePercent": 0.003,
              "name": "Tuleva II Samba Pensionifond",
              "ongoingChargesFigure": 0.0049,
              "pillar": 2,
              "price": 23,
              "profit": 500,
              "subtractions": 0,
              "unavailablePrice": 0,
            }
          }
        />
      </React.Fragment>,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  ok={true}
  showAction={true}
>
  <Link
    className="btn btn-light"
    to="/2nd-pillar-flow"
  >
    <MemoizedFormattedMessage
      id="account.status.choice.join.tuleva.2"
    />
  </Link>
</StatusBoxRow>
`;

exports[`SecondPillarStatusBox renders the success flow 1`] = `
<StatusBoxRow
  lines={
    Array [
      <React.Fragment>
        <Memo(MemoizedFormattedMessage)
          id="account.status.choice.lowFee.index.label"
        />
        :
         
        <ActiveFund
          fund={
            Object {
              "activeFund": true,
              "contributions": 500,
              "currency": "EUR",
              "fundManager": Object {
                "name": "Tuleva",
              },
              "isin": "EE000123",
              "managementFeePercent": 0.003,
              "name": "Tuleva II Samba Pensionifond",
              "ongoingChargesFigure": 0.0049,
              "pillar": 2,
              "price": 23,
              "profit": 500,
              "subtractions": 0,
              "unavailablePrice": 0,
            }
          }
        />
      </React.Fragment>,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  ok={true}
  showAction={true}
/>
`;

exports[`SecondPillarStatusBox renders the transfer flow when fund transfers incomplete 1`] = `
<StatusBoxRow
  error={true}
  lines={
    Array [
      <Memo(MemoizedFormattedMessage)
        id="account.status.choice.pillar.second.transferIncomplete"
      />,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  showAction={true}
>
  <Link
    className="btn btn-primary"
    to="/2nd-pillar-flow"
  >
    <MemoizedFormattedMessage
      id="account.status.choice.transfer.tuleva.2"
    />
  </Link>
</StatusBoxRow>
`;

exports[`SecondPillarStatusBox renders the withdrawal flow when withdrawal is in progress 1`] = `
<StatusBoxRow
  error={true}
  lines={
    Array [
      <Memo(MemoizedFormattedMessage)
        id="account.status.choice.pillar.second.withdraw"
      />,
    ]
  }
  name={
    <Memo(MemoizedFormattedMessage)
      id="account.status.choice.pillar.second"
    />
  }
  showAction={true}
>
  <Link
    className="btn btn-primary"
    to="/applications/undefined/cancellation"
  >
    <MemoizedFormattedMessage
      id="account.status.choice.pillar.second.withdraw.cancel"
    />
  </Link>
</StatusBoxRow>
`;
